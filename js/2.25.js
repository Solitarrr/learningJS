// Функции, стрелочные функции (ES6)
"use strict";

let num = 20; //переменная - глобальная

function showFirstMessage(text) { //в круглые скобки передаются аргументы
    console.log(text);
    num = 10; //переменная - локальная, если писать let
    console.log(num);
}

showFirstMessage("Hello World!"); //надо вызывать функции! и ставить скобки
//негласное правило функции - глагол с препиской того, над чем выполняется действие. camel case
console.log(num);

//Функция внутри себя ищет переменную, если не находит, то ищет уровнем выше, то есть вне функции

//Замыкание функции - это сама функции вместе со всеми внешними переменными, которые ей доступны

//С ютуба
//Создается лексическое окружение. Глобальное и локальное. Глобальное имеет ссылку null и переменные, а локальное имеет все, что имеет глобальное, но даже больше
//Замыкания - это способность функции в JS запоминать лексическое окружение, в котором она была создана. *т.е. хранить в себе ссылку на это окружение


// function calc(a, b) {
//     return (a + b); //возвращает значение, оканчивает функцию
//     console.log('недоступный');
// }

// console.log(calc(4, 3));
// console.log(calc(5, 6));
// console.log(calc(10, 6));

function ret() {
    let num = 50;

    //

    return num;
}

const anotherNum = ret();
console.log(anotherNum);

//пробегаемся по файлу, ищем все var и function declaration. Создает их и объявляет, а потом все по порядку
//function expression - функциональное выражение

const logger = function () {
    console.log("Hello");
};

logger();

//Стрелочкая функция

// const calc = (a, b) => a + b; //сокращенный вариант
//const calc = (a, b) => { return a + b }; //классика
//Сокращает код, но имеет особенности. Не имеет своего контекста вызова. Если функция в одну строчку, то можно сокращенный вариант
//Если функция имеет 1 аргумент, то: const calc = a => a + b; 
//если разрастается, то:
const calc = (a, b) => { 
    console.log('1');
    return a + b; 
};